/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RulesImport } from './routes/rules'
import { Route as RolesImport } from './routes/roles'
import { Route as PermissionImport } from './routes/permission'
import { Route as LoginImport } from './routes/login'
import { Route as AuditImport } from './routes/audit'
import { Route as AboutImport } from './routes/about'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const RulesRoute = RulesImport.update({
  id: '/rules',
  path: '/rules',
  getParentRoute: () => rootRoute,
} as any)

const RolesRoute = RolesImport.update({
  id: '/roles',
  path: '/roles',
  getParentRoute: () => rootRoute,
} as any)

const PermissionRoute = PermissionImport.update({
  id: '/permission',
  path: '/permission',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuditRoute = AuditImport.update({
  id: '/audit',
  path: '/audit',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/audit': {
      id: '/audit'
      path: '/audit'
      fullPath: '/audit'
      preLoaderRoute: typeof AuditImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/permission': {
      id: '/permission'
      path: '/permission'
      fullPath: '/permission'
      preLoaderRoute: typeof PermissionImport
      parentRoute: typeof rootRoute
    }
    '/roles': {
      id: '/roles'
      path: '/roles'
      fullPath: '/roles'
      preLoaderRoute: typeof RolesImport
      parentRoute: typeof rootRoute
    }
    '/rules': {
      id: '/rules'
      path: '/rules'
      fullPath: '/rules'
      preLoaderRoute: typeof RulesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRoute
  '/about': typeof AboutRoute
  '/audit': typeof AuditRoute
  '/login': typeof LoginRoute
  '/permission': typeof PermissionRoute
  '/roles': typeof RolesRoute
  '/rules': typeof RulesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRoute
  '/about': typeof AboutRoute
  '/audit': typeof AuditRoute
  '/login': typeof LoginRoute
  '/permission': typeof PermissionRoute
  '/roles': typeof RolesRoute
  '/rules': typeof RulesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRoute
  '/about': typeof AboutRoute
  '/audit': typeof AuditRoute
  '/login': typeof LoginRoute
  '/permission': typeof PermissionRoute
  '/roles': typeof RolesRoute
  '/rules': typeof RulesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/audit'
    | '/login'
    | '/permission'
    | '/roles'
    | '/rules'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/audit'
    | '/login'
    | '/permission'
    | '/roles'
    | '/rules'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/about'
    | '/audit'
    | '/login'
    | '/permission'
    | '/roles'
    | '/rules'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  AboutRoute: typeof AboutRoute
  AuditRoute: typeof AuditRoute
  LoginRoute: typeof LoginRoute
  PermissionRoute: typeof PermissionRoute
  RolesRoute: typeof RolesRoute
  RulesRoute: typeof RulesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  AboutRoute: AboutRoute,
  AuditRoute: AuditRoute,
  LoginRoute: LoginRoute,
  PermissionRoute: PermissionRoute,
  RolesRoute: RolesRoute,
  RulesRoute: RulesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/about",
        "/audit",
        "/login",
        "/permission",
        "/roles",
        "/rules"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/audit": {
      "filePath": "audit.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/permission": {
      "filePath": "permission.tsx"
    },
    "/roles": {
      "filePath": "roles.tsx"
    },
    "/rules": {
      "filePath": "rules.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
